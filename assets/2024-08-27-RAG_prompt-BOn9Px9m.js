const n=`---
title: RAG 프롬프트 작성 방법
---

### 단계별 접근

1. 먼저 데이터를 수집하고 정리하는 단계에서, 질병이나 라이프스타일에 적합한 정보들을 데이터베이스나 외부 API에서 가져옵니다. 이 정보들은 추후 단계에서 활용될 수 있도록 준비됩니다.
2. 수집된 정보를 사용하여, 주어진 레시피가 특정 질병 또는 라이프스타일에 적합한지 판단합니다. 이 단계에서는 이미 정리된 정보를 기반으로 한 명확한 판단만 내리게 됩니다.
3. 세 번째 단계: 질병과 라이프스타일에 따른 추가적인 조언(예: 특정 영양소 보충 권장)을 제공합니다. 이 과정은 첫 번째와 두 번째 단계의 결과를 바탕으로 진행됩니다.

### 서브 프롬프트 사용

1. 첫 번째 서브 프롬프트: 모델이 질병과 레시피 간의 적합성을 판단하는 데 집중합니다. 예를 들어, “이 레시피가 당뇨 환자에게 적합한가요?“라는 질문에 대해 답변하게 합니다.
2. 두 번째 서브 프롬프트: 이어서 라이프스타일 적합성을 평가합니다. 예를 들어, “이 레시피가 저탄수화물 다이어트에 적합한가요?“와 같은 질문을 던집니다.
3. 세 번째 서브 프롬프트: 마지막으로 추가적인 영양소 보충 또는 조언을 제공합니다. 예를 들어, “이 레시피에 추가로 권장되는 영양소는 무엇인가요?“와 같은 질문을 다룹니다.

### 질문 분리

- 복잡한 질문을 여러 개의 작은 질문으로 나누어, 모델이 한 번에 하나의 질문만 처리하게 합니다. 예를 들어, “이 레시피가 특정 질병에 적합한가요?“라는 질문에 대한 답변을 받은 후, 다음으로 “이 레시피가 특정 라이프스타일에 적합한가요?“라는 질문을 이어서 던집니다.

### 조합 및 병렬 처리

- 각 질병 및 라이프스타일 적합성을 독립적으로 평가한 후, 최종적으로 결과를 조합하여 종합적인 판단을 내리게 합니다. 예를 들어, 질병 적합성 평가와 라이프스타일 적합성 평가를 병렬로 진행한 후, 두 결과를 종합하여 최종 판단을 내립니다.

### 데이터 포맷 간소화

- JSON 같은 복잡한 구조를 단순화하여 모델이 처리하기 쉽게 합니다. 예를 들어, 레시피 정보는 중요한 항목만 나열하고 간결하게 표현합니다. “이 레시피는 {ingredient1}, {ingredient2} 등을 포함하고 있으며, {disease1} 환자에게 적합합니다.“와 같이 간소화된 포맷을 사용할 수 있습니다.

### 최종

단계별 접근을 기본으로 하고, 서브 프롬프트와 질문 분리를 적용하여 모델이 각 단계를 명확하게 이해하고 처리할 수 있도록 합니다. 조합 및 병렬 처리를 사용하여 각 단계의 결과를 통합하며, 최종적으로 데이터 포맷 간소화를 통해 모델이 쉽게 정보를 이해할 수 있도록 합니다.
`;export{n as default};
